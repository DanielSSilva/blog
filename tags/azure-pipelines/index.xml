<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure Pipelines on Daniel Silva's blog</title><link>https://blog.danielssilva.dev/tags/azure-pipelines/</link><description>Recent content in Azure Pipelines on Daniel Silva's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 14 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.danielssilva.dev/tags/azure-pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure pipelines - Adding code coverage and reports to the pipeline</title><link>https://blog.danielssilva.dev/post/azure-pipelines---adding-code-coverage-and-reports-to-the-pipeline/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/azure-pipelines---adding-code-coverage-and-reports-to-the-pipeline/</guid><description>In the previous post, we&amp;rsquo;ve created a simple pipeline that builds and tests our application. We know that our tests ran successfully, but that&amp;rsquo;s all. We don&amp;rsquo;t actually know how much code we are testing.
What&amp;rsquo;s code coverage ðŸ”—I really like the definition that was given in this stackoverflow post. As mentioned:
Code coverage is a measurement of how many lines/blocks/arcs of your code are executed while the automated tests are running.</description></item><item><title>A journey through (Azure) Pipelines</title><link>https://blog.danielssilva.dev/post/a-journey-through-azure-pipelines---deploy-faster-with-more-quality-and-confidence/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/a-journey-through-azure-pipelines---deploy-faster-with-more-quality-and-confidence/</guid><description>UPDATE: This &amp;ldquo;Journey&amp;rdquo; will be on pause, as I&amp;rsquo;ve switched positions and I currently don&amp;rsquo;t actively work with Azure Pipelines.
As a first and most broad idea of what a pipeline is, I like to think of it as the filler between developing and delivering your software. A &amp;ldquo;piece&amp;rdquo; that aggregates and performs every necessary action/procedure (or at least most of them) to take your code up to the final product (an app, a library, a website, you name it).</description></item><item><title>Azure pipelines - YAML structure and creating simple pipeline for C# project</title><link>https://blog.danielssilva.dev/post/azure-pipelines---yaml-structure-and-creating-simple-pipeline-for-csharp-project/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/azure-pipelines---yaml-structure-and-creating-simple-pipeline-for-csharp-project/</guid><description>Azure pipelines can be created through a GUI or through a YAML file. I will be focusing on the YAML instead of GUI for three main reasons:
It is being favored over the GUI Allows to commit the YAML to a source control, thus allowing versioning Re-usability (will cover it in another post) Schema of the YAML file ðŸ”—Microsoft docs has an extensive explanation about the schema and everything that is supported.</description></item></channel></rss>