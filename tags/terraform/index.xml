<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Terraform on Daniel Silva's blog</title><link>https://blog.danielssilva.dev/tags/terraform/</link><description>Recent content in Terraform on Daniel Silva's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 26 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.danielssilva.dev/tags/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title>Gitlab private instance and private Terraform modules</title><link>https://blog.danielssilva.dev/post/gitlab-private-instance-and-private-terraform-modules/</link><pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/gitlab-private-instance-and-private-terraform-modules/</guid><description>At my current job, we use a private instance of Gitlab to host the code, CI/CD, and such, and we also have private runners. I recently began working on a terraform script that became a module since multiple teams/projects can leverage such implementation. For this reason, it makes sense to have a repository dedicated to this module (or even more modules, but that can be another topic).
The objective ðŸ”—The idea is pretty simple: Have a git repository that hosts the module(s), and every other project that wants to use the them, reference the repository through the source = &amp;quot;git:: (.</description></item></channel></rss>