<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on Daniel Silva's blog</title><link>https://blog.danielssilva.dev/tags/devops/</link><description>Recent content in DevOps on Daniel Silva's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 14 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.danielssilva.dev/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Get resources missing in Resource Group using PowerShell</title><link>https://blog.danielssilva.dev/draft/get-missing-azure-resources-powershell/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/draft/get-missing-azure-resources-powershell/</guid><description>&lt;p>I&amp;rsquo;ve recently stumbled across a situation where some resource groups were missing a given type of resource.
The &amp;ldquo;normal&amp;rdquo; scenario is that each resource group has a bunch of resources, and this happens for multiple resource groups owned by my team.
There were some issues with some implementations, and there was no logic on why some resource groups had the resource and others didn&amp;rsquo;t. Since we are talking about hundreds of resource groups, checking one by one is out of question.&lt;/p></description></item><item><title>Create private endpoints using ResourceID</title><link>https://blog.danielssilva.dev/post/create-private-endpoint-resourceid/</link><pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/create-private-endpoint-resourceid/</guid><description>&lt;h1 id="what-is-a-private-endpoint">What is a private endpoint? &lt;a href="#what-is-a-private-endpoint" class="anchor">ðŸ”—&lt;/a>&lt;/h1>&lt;p>As described by &lt;a href="https://learn.microsoft.com/en-us/azure/private-link/private-endpoint-overview" target="_blank" rel="noopener">Microsoft&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>A private endpoint is a network interface that uses a private IP address from your virtual network. This network interface connects you privately and securely to a service that&amp;rsquo;s powered by Azure Private Link. By enabling a private endpoint, you&amp;rsquo;re bringing the service into your virtual network.&lt;/p>
&lt;/blockquote>
&lt;p>This is a good way to allow all traffic between the host and Azure to go through a private connection, or, in other words, through Azure Backbone.&lt;/p></description></item><item><title>Simple yet efficient VSCode shortcuts for everyday use</title><link>https://blog.danielssilva.dev/post/simple-efficient-vscode-shortcuts/</link><pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/simple-efficient-vscode-shortcuts/</guid><description>&lt;p>There&amp;rsquo;s not a (working) day when I don&amp;rsquo;t open vscode. I would even say I spend 80% of my day on that app. I&amp;rsquo;ve been using it for the last 7 years, so naturally, I&amp;rsquo;ve developed a workflow/muscle memory while using the app.&lt;/p>
&lt;p>Today, I want to share with you some of the shortcuts I use daily to be more efficient.&lt;/p>
&lt;h1 id="before-we-start">Before we start &lt;a href="#before-we-start" class="anchor">ðŸ”—&lt;/a>&lt;/h1>&lt;p>I&amp;rsquo;m using MacOS and the US keyboard layout. Although, in most cases, the only difference is using the command key (âŒ˜) instead of alt, some shortcuts will be completely different. I will mark those so that you can compare and adjust.
You can see all shortcuts using âŒ˜K âŒ˜S or by going to Settings -&amp;gt; Keyboard Shortcuts.&lt;/p></description></item><item><title>Gitlab private instance and private Terraform modules</title><link>https://blog.danielssilva.dev/post/gitlab-private-instance-and-private-terraform-modules/</link><pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/gitlab-private-instance-and-private-terraform-modules/</guid><description>&lt;p>At my current job, we use a private instance of Gitlab to host the code, CI/CD, and such, and we also have private runners.
I recently began working on a terraform script that became a module since multiple teams/projects can leverage such implementation. For this reason, it makes sense to have a repository dedicated to this module (or even more modules, but that can be another topic).&lt;/p>
&lt;h2 id="the-objective">The objective &lt;a href="#the-objective" class="anchor">ðŸ”—&lt;/a>&lt;/h2>&lt;p>The idea is pretty simple: Have a git repository that hosts the module(s), and every other project that wants to use the them, reference the repository through the &lt;code>source = &amp;quot;git:: (...)&lt;/code> terraform syntax.&lt;/p></description></item><item><title>Azure pipelines - Adding code coverage and reports to the pipeline</title><link>https://blog.danielssilva.dev/post/azure-pipelines---adding-code-coverage-and-reports-to-the-pipeline/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/azure-pipelines---adding-code-coverage-and-reports-to-the-pipeline/</guid><description>&lt;p>In the &lt;a href="https://blog.danielssilva.dev/post/azure-pipelines---yaml-structure-and-creating-simple-pipeline-for-csharp-project/">previous post&lt;/a>, we&amp;rsquo;ve created a simple pipeline that builds and tests our application.
We know that our tests ran successfully, but that&amp;rsquo;s all. We don&amp;rsquo;t actually know how much code we are testing.&lt;/p>
&lt;h1 id="whats-code-coverage">What&amp;rsquo;s code coverage &lt;a href="#whats-code-coverage" class="anchor">ðŸ”—&lt;/a>&lt;/h1>&lt;p>I really like the definition that was given in &lt;a href="https://stackoverflow.com/a/195027" target="_blank" rel="noopener">this stackoverflow post&lt;/a>.
As mentioned:&lt;/p>
&lt;blockquote>
&lt;p>Code coverage is a measurement of how many lines/blocks/arcs of your code are executed while the automated tests are running.&lt;/p>
&lt;p>Code coverage is collected by using a specialized tool to instrument the binaries to add tracing calls and run a full set of automated tests against the instrumented product. A good tool will give you not only the percentage of the code that is executed, but also will allow you to drill into the data and see exactly which lines of code were executed during a particular test.&lt;/p></description></item><item><title>Azure pipelines - YAML structure and creating simple pipeline for C# project</title><link>https://blog.danielssilva.dev/post/azure-pipelines---yaml-structure-and-creating-simple-pipeline-for-csharp-project/</link><pubDate>Sat, 10 Jul 2021 01:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/azure-pipelines---yaml-structure-and-creating-simple-pipeline-for-csharp-project/</guid><description>&lt;p>Azure pipelines can be created through a GUI or through a YAML file.
I will be focusing on the YAML instead of GUI for three main reasons:&lt;/p>
&lt;ul>
&lt;li>It is being favored over the GUI&lt;/li>
&lt;li>Allows to commit the YAML to a source control, thus allowing versioning&lt;/li>
&lt;li>Re-usability (will cover it in another post)&lt;/li>
&lt;/ul>
&lt;h1 id="schema-of-the-yaml-file">Schema of the YAML file &lt;a href="#schema-of-the-yaml-file" class="anchor">ðŸ”—&lt;/a>&lt;/h1>&lt;p>&lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema%2Cparameter-schema" target="_blank" rel="noopener">Microsoft docs&lt;/a> has an extensive explanation about the schema and everything that is supported.
This is my go-to when I have questions about schema/features.&lt;/p></description></item><item><title>A journey through (Azure) Pipelines</title><link>https://blog.danielssilva.dev/post/a-journey-through-azure-pipelines---deploy-faster-with-more-quality-and-confidence/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/a-journey-through-azure-pipelines---deploy-faster-with-more-quality-and-confidence/</guid><description>&lt;h2 id="update-this-journey-is-on-pause-as-ive-switched-positions-and-i-currently-dont-actively-work-with-azure-pipelines">&lt;em>&lt;strong>UPDATE: This &amp;ldquo;Journey&amp;rdquo; is on pause, as I&amp;rsquo;ve switched positions and I currently don&amp;rsquo;t actively work with Azure Pipelines.&lt;/strong>&lt;/em> &lt;a href="#update-this-journey-is-on-pause-as-ive-switched-positions-and-i-currently-dont-actively-work-with-azure-pipelines" class="anchor">ðŸ”—&lt;/a>&lt;/h2>&lt;p>As a first and most broad idea of what a pipeline is, I like to think of it as the filler between developing and delivering your software. A &amp;ldquo;piece&amp;rdquo; that aggregates and performs every necessary action/procedure (or at least most of them) to take your code up to the final product (an app, a library, a website, you name it).
The most amazing part is that it can be as simple as performing a build to ensure that your code compiles, and grow as your needs, ending up being something like:&lt;/p></description></item><item><title>Using RaspberryPi as an Azure agent for Pipelines (Part 2)</title><link>https://blog.danielssilva.dev/post/using-raspberry-pi-as-an-azure-agent-for-pipelines-part-2/</link><pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/using-raspberry-pi-as-an-azure-agent-for-pipelines-part-2/</guid><description>&lt;p>In the &lt;a href="https://danielssilva.dev/2020-09-28-Using-Raspberry-Pi-as-an-Azure-Agent-for-Pipelines/" target="_blank" rel="noopener">first part&lt;/a> of this series, we have seen how we can setup a self hosted agent (in this case on a Raspberry Pi).
To recap, here&amp;rsquo;s a quick list of things required to do on the target host (this is agnostic to the underlying operating system):&lt;/p>
&lt;ul>
&lt;li>Get the latest agent version available (head to the Azure DevOps website &amp;gt; Project settings &amp;gt; Agent Pools &amp;gt; your pool &amp;gt; new agent &amp;gt; download agent)&lt;/li>
&lt;li>Extract the file&lt;/li>
&lt;li>Run the config file and specify:
&lt;ul>
&lt;li>Server URL&lt;/li>
&lt;li>Your PAT&lt;/li>
&lt;li>Agent pool&lt;/li>
&lt;li>Agent name&lt;/li>
&lt;li>Work folder&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Run the run file or configure as a service.&lt;/li>
&lt;/ul>
&lt;p>This is fine and easy enough, if you are targeting just one host.&lt;/p></description></item><item><title>A (very) small introduction to Ansible</title><link>https://blog.danielssilva.dev/post/a-very-small-introduction-to-ansible/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/a-very-small-introduction-to-ansible/</guid><description>&lt;p>While I was writing for my second part of &amp;ldquo;Using RaspberryPi as an Azure agent for Pipelines&amp;rdquo; (you can see the part 1 &lt;a href="https://danielssilva.dev/2020-09-28-Using-Raspberry-Pi-as-an-Azure-Agent-for-Pipelines/" target="_blank" rel="noopener">here&lt;/a>) I came across a tedious scenario: I needed to connect to different machines, download some software and perform some configurations, all using the terminal.
I&amp;rsquo;m currently using a cluster of 4 raspberry pi as servers/agents/nodes/you name it, and after deploying the software on the first one I thought &amp;ldquo;there must be a better and faster way to achieve this&amp;rdquo;, and it is where Ansible comes into play.&lt;/p></description></item><item><title>Using RaspberryPi as an Azure agent for Pipelines (Part 1)</title><link>https://blog.danielssilva.dev/post/using-raspberry-pi-as-an-azure-agent-for-pipelines/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/using-raspberry-pi-as-an-azure-agent-for-pipelines/</guid><description>&lt;p>I&amp;rsquo;ve recently switched to a DevOps role in a new company.
I know some basic DevOps concepts, CI/CD, pipelines, builds, artifacts and so on, but never really laid my hands on it.&lt;/p>
&lt;p>I&amp;rsquo;ve been doing a bunch of Microsoft Learn modules related to DevOps and other key components that will be part of my new daily basis.&lt;/p>
&lt;p>One that caught my attention was the &lt;a href="https://docs.microsoft.com/en-us/learn/modules/host-build-agent/" target="_blank" rel="noopener">Host your own build agent in Azure Pipelines&lt;/a>, which is a module from the &lt;a href="https://docs.microsoft.com/en-us/learn/paths/build-applications-with-azure-devops/" target="_blank" rel="noopener">Build applications with Azure DevOps&lt;/a> learning path.&lt;/p></description></item></channel></rss>