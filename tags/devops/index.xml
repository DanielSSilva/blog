<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on Daniel Silva's blog</title><link>https://blog.danielssilva.dev/tags/devops/</link><description>Recent content in DevOps on Daniel Silva's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 23 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.danielssilva.dev/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple yet efficient VSCode shortcuts for everyday use</title><link>https://blog.danielssilva.dev/post/simple-efficient-vscode-shortcuts/</link><pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/simple-efficient-vscode-shortcuts/</guid><description>There&amp;rsquo;s not a (working) day when I don&amp;rsquo;t open vscode. I would even say I spend 80% of my day on that app. I&amp;rsquo;ve been using it for the last 7 years, so naturally, I&amp;rsquo;ve developed a workflow/muscle memory while using the app.
Today, I want to share with you some of the shortcuts I use daily to be more efficient.
Before we start ðŸ”—I&amp;rsquo;m using MacOS and the US keyboard layout.</description></item><item><title>Gitlab private instance and private Terraform modules</title><link>https://blog.danielssilva.dev/post/gitlab-private-instance-and-private-terraform-modules/</link><pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/gitlab-private-instance-and-private-terraform-modules/</guid><description>At my current job, we use a private instance of Gitlab to host the code, CI/CD, and such, and we also have private runners. I recently began working on a terraform script that became a module since multiple teams/projects can leverage such implementation. For this reason, it makes sense to have a repository dedicated to this module (or even more modules, but that can be another topic).
The objective ðŸ”—The idea is pretty simple: Have a git repository that hosts the module(s), and every other project that wants to use the them, reference the repository through the source = &amp;quot;git:: (.</description></item><item><title>Azure pipelines - Adding code coverage and reports to the pipeline</title><link>https://blog.danielssilva.dev/post/azure-pipelines---adding-code-coverage-and-reports-to-the-pipeline/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/azure-pipelines---adding-code-coverage-and-reports-to-the-pipeline/</guid><description>In the previous post, we&amp;rsquo;ve created a simple pipeline that builds and tests our application. We know that our tests ran successfully, but that&amp;rsquo;s all. We don&amp;rsquo;t actually know how much code we are testing.
What&amp;rsquo;s code coverage ðŸ”—I really like the definition that was given in this stackoverflow post. As mentioned:
Code coverage is a measurement of how many lines/blocks/arcs of your code are executed while the automated tests are running.</description></item><item><title>Azure pipelines - YAML structure and creating simple pipeline for C# project</title><link>https://blog.danielssilva.dev/post/azure-pipelines---yaml-structure-and-creating-simple-pipeline-for-csharp-project/</link><pubDate>Sat, 10 Jul 2021 01:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/azure-pipelines---yaml-structure-and-creating-simple-pipeline-for-csharp-project/</guid><description>Azure pipelines can be created through a GUI or through a YAML file. I will be focusing on the YAML instead of GUI for three main reasons:
It is being favored over the GUI Allows to commit the YAML to a source control, thus allowing versioning Re-usability (will cover it in another post) Schema of the YAML file ðŸ”—Microsoft docs has an extensive explanation about the schema and everything that is supported.</description></item><item><title>A journey through (Azure) Pipelines</title><link>https://blog.danielssilva.dev/post/a-journey-through-azure-pipelines---deploy-faster-with-more-quality-and-confidence/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/a-journey-through-azure-pipelines---deploy-faster-with-more-quality-and-confidence/</guid><description>UPDATE: This &amp;ldquo;Journey&amp;rdquo; is on pause, as I&amp;rsquo;ve switched positions and I currently don&amp;rsquo;t actively work with Azure Pipelines. ðŸ”—As a first and most broad idea of what a pipeline is, I like to think of it as the filler between developing and delivering your software. A &amp;ldquo;piece&amp;rdquo; that aggregates and performs every necessary action/procedure (or at least most of them) to take your code up to the final product (an app, a library, a website, you name it).</description></item><item><title>Using RaspberryPi as an Azure agent for Pipelines (Part 2)</title><link>https://blog.danielssilva.dev/post/using-raspberry-pi-as-an-azure-agent-for-pipelines-part-2/</link><pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/using-raspberry-pi-as-an-azure-agent-for-pipelines-part-2/</guid><description>In the first part of this series, we have seen how we can setup a self hosted agent (in this case on a Raspberry Pi). To recap, here&amp;rsquo;s a quick list of things required to do on the target host (this is agnostic to the underlying operating system):
Get the latest agent version available (head to the Azure DevOps website &amp;gt; Project settings &amp;gt; Agent Pools &amp;gt; your pool &amp;gt; new agent &amp;gt; download agent) Extract the file Run the config file and specify: Server URL Your PAT Agent pool Agent name Work folder Run the run file or configure as a service.</description></item><item><title>A (very) small introduction to Ansible</title><link>https://blog.danielssilva.dev/post/a-very-small-introduction-to-ansible/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/a-very-small-introduction-to-ansible/</guid><description>While I was writing for my second part of &amp;ldquo;Using RaspberryPi as an Azure agent for Pipelines&amp;rdquo; (you can see the part 1 here) I came across a tedious scenario: I needed to connect to different machines, download some software and perform some configurations, all using the terminal. I&amp;rsquo;m currently using a cluster of 4 raspberry pi as servers/agents/nodes/you name it, and after deploying the software on the first one I thought &amp;ldquo;there must be a better and faster way to achieve this&amp;rdquo;, and it is where Ansible comes into play.</description></item><item><title>Using RaspberryPi as an Azure agent for Pipelines (Part 1)</title><link>https://blog.danielssilva.dev/post/using-raspberry-pi-as-an-azure-agent-for-pipelines/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://blog.danielssilva.dev/post/using-raspberry-pi-as-an-azure-agent-for-pipelines/</guid><description>I&amp;rsquo;ve recently switched to a DevOps role in a new company. I know some basic DevOps concepts, CI/CD, pipelines, builds, artifacts and so on, but never really laid my hands on it.
I&amp;rsquo;ve been doing a bunch of Microsoft Learn modules related to DevOps and other key components that will be part of my new daily basis.
One that caught my attention was the Host your own build agent in Azure Pipelines, which is a module from the Build applications with Azure DevOps learning path.</description></item></channel></rss>